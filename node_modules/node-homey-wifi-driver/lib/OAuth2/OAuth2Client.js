'use strict';

const uuid = require('uuid/v4');
const EventEmitter = require('events');

const OAuth2Account = require('./OAuth2Account');

class OAuth2Client extends EventEmitter {

	constructor(options) {
		super();

		options = options || {};

		this.allowMultipleAccounts = !!options.allowMultipleAccounts;
		this._accounts = [];
		this.oauth2Url = options.url;
		this.tokenEndpoint = options.tokenEndpoint;
		this.key = options.key;
		this.secret = options.secret;
		this.id = options.id || uuid();
		console.log('new Client', this);
	}

	getAccount(id) {
		if (id) {
			const foundAccount = this._accounts.find(client => client.id === id);
			if (foundAccount) return foundAccount;
			return new Error('could_not_find_account');
		}
		return new Error('missing_account_id');
	}

	createAccount(options) {
		console.log('CREATE ACCOUNDT OPTIONS', options);
		options = options || {};
		options.oauth2Url = this.oauth2Url;
		options.tokenEndpoint = this.tokenEndpoint;
		options.key = this.key;
		options.secret = this.secret;
		options.id = options.oauth2AccountId || options.id;
		return this.addAccount(new OAuth2Account(options));
	}

	addAccount(account) {
		console.log('ADD ACCOUNT WITH ID', account.id, !(account instanceof OAuth2Account));
		if (account && !(account instanceof OAuth2Account)) return new TypeError('account_is_not_instanceof_OAuth2Account');
		if (!this.allowMultipleAccounts && this._accounts.length > 0) {

			// If the ids differ, user is trying to add another unique account which is not allowed
			if (account.id !== this._accounts[0].id) return new Error('only_one_unique_account_allowed');

			// Ids are equal, consider this the same account
			return this._accounts[0];
		}
		if (this._accounts.length > 0) {

			// Check if account was already added
			const foundAccount = this.getAccount(account.id);
			console.log('FOUND ACCOUNT', foundAccount);
			// Account was already added, return known account and do not add new one
			if (foundAccount instanceof OAuth2Account) return foundAccount;

			// Account was not yet added check if more are allowed
			if (!this.allowMultipleAccounts) return new Error('only_one_account_allowed');
		}

		this._accounts.push(account);
		return account;
	}

	deleteAccount(account_) {
		account_.destroy(); // TODO remove listeners etc
		this._accounts = this._accounts.filter(account => account.id !== account_.id);
		console.log('AFTER DELETE');
		console.log(this._accounts);
	}

	getOAuth2Url(account) {
		if (!account && this._accounts.length === 1) return this._accounts[0].oauth2Url;
		if (this._accounts.length > 1) return new Error('multiple_accounts_not_supported');
		return new Error('could_not_find_oauth2_url');
	}
}

module.exports = OAuth2Client;
