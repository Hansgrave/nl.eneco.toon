'use strict';

const Homey = require('homey');
const uuid = require('uuid/v4');
const EventEmitter = require('events');
const request = require('request-promise-native');

class OAuth2Account extends EventEmitter {

	/**
	 * Construct a OAuth2Account instance, that will handle fetching and refreshing access tokens.
	 * @param {Object} options
	 * @param {string} [options.id] - OAuth2 account identifier, or auto-generated uuid
	 * @param {string} options.url - OAuth2 authorization url
	 * @param {string} options.tokenEndpoint - OAuth2 token endpoint
	 * @param {string} options.key - OAuth2 client key
	 * @param {string} options.secret - OAuth2 client secret
	 * @param {string} [options.refreshToken] - OAuth2 refresh token
	 * @param {string} [options.accessToken] - OAuth2 access token
	 */
	constructor(options) {
		super();

		this.id = options.id || options.oauth2AccountId || uuid(); // TODO make this uniform
		this.oauth2Url = options.url;
		this.tokenEndpoint = options.tokenEndpoint;
		this.key = options.key;
		this.secret = options.secret;

		// Store tokens for later retrieval
		if (options.accessToken) Homey.ManagerSettings.set(`oauth2_${this.id}_accessToken`, options.accessToken); // TODO does this still work?
		if (options.refreshToken) Homey.ManagerSettings.set(`oauth2_${this.id}_refreshToken`, options.refreshToken); // TODO does this still work?

		// Get access tokens from store or options object
		this._accessToken = Homey.ManagerSettings.get(`oauth2_${this.id}_accessToken`) || options.accessToken;
		this._refreshToken = Homey.ManagerSettings.get(`oauth2_${this.id}_refreshToken`) || options.refreshToken;
	}

	/**
	 * Method that returns the OAuth2Url belonging to this OAuth2Account.
	 * @returns {string}
	 */
	getOAuth2Url() {
		return this.oauth2Url;
	}

	/**
	 * Method that will clean up event listeners and unsets storage settings.
	 */
	destroy() {
		if (this.refreshTokensTimeout) clearTimeout(this.refreshTokensTimeout);
		Homey.ManagerSettings.unset(`oauth2_${this.id}_accessToken`);
		Homey.ManagerSettings.unset(`oauth2_${this.id}_refreshToken`);
		this.removeAllListeners();
	}

	/**
	 * Getter for accessToken.
	 * @returns {string}
	 */
	get accessToken() {
		return this._accessToken;
	}

	/**
	 * Setter for accessToken, also stores it in persistent storage.
	 * @param {string} accessToken - new access token
	 */
	set accessToken(accessToken) {
		console.log('set accesstoken');
		Homey.ManagerSettings.set(`oauth2_${this.id}_accessToken`, accessToken);
		this._accessToken = accessToken;
	}

	/**
	 * Getter for refreshToken.
	 * @returns {string}
	 */
	get refreshToken() {
		return this._refreshToken;
	}

	/**
	 * Setter for refreshToken, also stores it in persistent storage.
	 * @param {string} refreshToken - new refresh token
	 */
	set refreshToken(refreshToken) {
		Homey.ManagerSettings.set(`oauth2_${this.id}_refreshToken`, refreshToken);
		this._refreshToken = refreshToken;
	}

	/**
	 * Method that performs a request to retrieve access tokens.
	 * @param {string} code - OAuth2 code
	 * @returns {Promise}
	 */
	getAccessTokens(code) {
		return new Promise((resolve, reject) => {
			request({
				url: this.tokenEndpoint,
				method: 'POST',
				json: true,
				form: {
					grant_type: 'authorization_code',
					client_id: this.key,
					client_secret: this.secret,
					redirect_uri: 'https://callback.athom.com/oauth2/callback/',
					code,
				},
			}).then(body => {

				// Check for invalid body
				if (!body || !body.hasOwnProperty('access_token') || !body.hasOwnProperty('refresh_token')) {
					return reject(new Error('incomplete_tokens_object_retrieved'));
				}

				// Store new tokens
				this.accessToken = body.access_token;
				this.refreshToken = body.refresh_token;

				// Set refresh access token timeout
				this.setRefreshTokenTimeout((body.expires_in - 60) * 1000);

				// Emit refreshed event
				this.emit('refreshed', { accessToken: this.accessToken, refreshToken: this.refreshToken });

				// Resolve with new tokens
				return resolve({
					accessToken: body.access_token,
					refreshToken: body.refresh_token,
				});
			}).catch(err => reject(err));
		});
	}

	/**
	 * Method that sets a timeout for the next refresh of tokens.
	 * @param {number} timeout - refresh timeout (ms)
	 */
	setRefreshTokenTimeout(timeout) {
		// Set refresh access token timeout
		if (this.refreshTokensTimeout) clearTimeout(this.refreshTokensTimeout);
		this.refreshTokensTimeout = setTimeout(() => {
			this.refreshAccessTokens();
		}, timeout);
	}

	/**
	 * Method that performs a request that will refresh the access tokens.
	 * @returns {Promise}
	 */
	refreshAccessTokens() {
		return new Promise((resolve, reject) => {

			if (!this.refreshToken) {
				return reject(new Error('missing_refresh_token'));
			}

			request({
				url: this.tokenEndpoint,
				method: 'POST',
				headers: {
					'Content-Type': 'application/x-www-form-urlencoded',
				},
				json: true,
				form: {
					client_secret: this.secret,
					client_id: this.key,
					grant_type: 'refresh_token',
					refresh_token: this.refreshToken,
				},
			}).then(body => {

				// Check for invalid body
				if (!body || !body.hasOwnProperty('access_token') || !body.hasOwnProperty('refresh_token')) {
					return reject(new Error('invalid_tokens_object_received'));
				}

				// Store new tokens
				this.accessToken = body.access_token;
				this.refreshToken = body.refresh_token;

				// Set refresh access token timeout
				this.setRefreshTokenTimeout((body.expires_in - 60) * 1000);

				// Emit refreshed event
				this.emit('refreshed', { accessToken: this.accessToken, refreshToken: this.refreshToken });

				// Resolve new tokens
				return resolve({
					accessToken: body.access_token,
					refreshToken: body.refresh_token,
				});

			}).catch(err => reject(err));
		});
	}
}

module.exports = OAuth2Account;
