'use strict';

const OAuth2Client = require('./OAuth2Client');

// TODO add support for multiple clients

class OAuth2ClientManager {
	constructor(options) {
		options = options || {};
		this.allowMultipleClients = !!options.allowMultipleClients;
		this._accounts = [];
		console.log('created new OAuth2ClientManager');
	}

	getClient(id) {
		if (this._accounts.length === 1) return this._accounts[0];
		if (this._accounts.length > 1) {
			if (id) {
				const foundClient = this._accounts.find(client => client.id === id);
				if (foundClient) return foundClient;
				return new Error('multiple_clients_not_supported');
			}
			return new Error('missing_client_id');
		}
		return new Error('client_not_found');
	}

	createClient(options) {
		return this.addClient(new OAuth2Client(options));
	}

	addClient(client) {
		if (!(client instanceof OAuth2Client)) return new TypeError('client_is_not_instanceof_OAuth2Client');
		if (!this.allowMultipleClients && this._accounts.length > 0) return new Error('only_one_client_allowed');
		if (this._accounts.length > 0) {

			// Check if client was already added
			const foundClient = this.getClient(client.id);

			// Client was already added, return known client and do not add new one
			if (foundClient instanceof OAuth2Client) return foundClient;

			// Client was not yet added check if more are allowed
			if (!this.allowMultipleClients) return new Error('only_one_client_allowed');
		}

		this._accounts.push(client);
		return client;
	}

	getOAuth2Url(client) {
		if (!client && this._accounts.length === 1) return this._accounts[0].oauth2Url;
		if (this._accounts.length > 1) return new Error('multiple_clients_not_supported');
		return new Error('could_not_find_oauth2_url');
	}
}

module.exports = OAuth2ClientManager;
