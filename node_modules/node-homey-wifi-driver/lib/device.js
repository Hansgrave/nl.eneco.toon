'use strict';

const Homey = require('homey');
const backoff = require('backoff');

const homeyWifiDeviceOptions = {
	backOffStrategy: {
		randomisationFactor: 0,
		initialDelay: 10000,
		maxDelay: 1000 * 60 * 60 * 12, // 12 hours
		// maxTries: 5,
		// onBackOffReady: function onBackOffReady() {
		// 	setTimeout(() => {
		// 		this.backOffStrategy.backoff();
		// 	}, 2000);
		// },
		// onBackOffFailed: () => {
		//   console.log('custom failed handler')
		// }
	},
};

class HomeyWifiDevice extends Homey.Device {

	getOAuth2Account() {
		console.log('getOAuth2Account', this.getStoreValue('tempOAuth2Account'), this.getStoreValue('oauth2Account'))
		if (this.oauth2Account) return this.oauth2Account;

		// TODO move all this oauth stuff to wifi device
		// Get temp oauth account from store (if device was just inited, else get perm)
		this.oauth2Account = this.getDriver().oauth2Client.createAccount(this.getStoreValue('tempOAuth2Account') || this.getStoreValue('oauth2Account'));

		// TODO update tokens in store when refreshed
		this.setStoreValue('oauth2Account', this.oauth2Account);

		// Permanently remove temporary oauth account
		this.unsetStoreValue('tempOAuth2Account');

		return this.oauth2Account;

	}
	onInit(options) {

		options = options || {};

		// Create backoff strategy only at first init or after backofStrategy has been reset
		if (options.hasOwnProperty('backOffStrategy') && !this.backOffStrategy) {

			// Wrap backoff methods
			this.resetBackOff = () => {
				if (!this.backOffStrategy) return new Error('no_active_backoff_strategy');
				this.log('reset backoff strategy');
				this.backOffStrategy.reset();
				this.backOffStrategy = null;
			};
			this.nextBackOff = () => {
				if (!this.backOffStrategy) return new Error('no_active_backoff_strategy');
				this.backOffStrategy.backoff();
			};

			// Create backoff strategy
			this.backOffStrategy = backoff.fibonacci({
				randomisationFactor: options.backOffStrategy.randomisationFactor || 0,
				initialDelay: options.backOffStrategy.initialDelay || 10000,
				maxDelay: options.backOffStrategy.maxDelay || 300000,
			});

			if (typeof options.backOffStrategy.maxTries === 'number')
				this.backOffStrategy.failAfter(options.backOffStrategy.maxTries);

			this.backOffStrategy.on('ready', (number, delay) => {
				this.log(`onInit() -> retry init -> attempt ${number} -> delay ${delay}ms`);
				if (typeof options.backOffStrategy.onBackOffReady === 'function') {
					options.backOffStrategy.onBackOffReady.call(this);
				} else {
					this.onInit();
				}
			});

			if (options.backOffStrategy.onBackOffFailed) {
				this.backOffStrategy.on('fail', () => options.backOffStrategy.onBackOffFailed.call(this));
			}
			else {
				this.backOffStrategy.on('fail', () => this.error('backoff strategy failed'));
			}
		}
	}
}

module.exports = HomeyWifiDevice;