'use strict';

const request = require('request-promise-native');

const WebAPIUtil = require('./WebAPIUtil');
const WifiDevice = require('./../WifiDevice');
const PromiseQueue = require('./../Util/PromiseQueue');

/**
 * The WebAPIDevice class exposes several methods that provide request-like functionality. In addition, all api calls
 * are queued, and if desired throttled and rate limited.
 * @extends WifiDevice
 * @example
 *
 * const WebAPIDevice = require('homey-wifidriver').WebAPIDevice;
 *
 * class myDevice extends WebAPIDevice {
 *      async onInit(){
 *          await super.onInit({
 *              apiBaseUrl: 'http://www.example-api.com/',
 *              throttle: 500, // 500ms between api calls
 *              rateLimit: {
 *                  max: 5,
 *                  per: 60000, // maximum of 5 requests per minute, all exceeding calls will be queued
 *              }
 *          }).catch(err => this.error(err));
 *
 *          this.setDefaultHeaders({
 *              Authorization: 'Bearer 123456789'
 *          });
 *
 *          this.apiCallGet({command: 'testRequest'})
 *              .then(res => {
 *                  console.log(res);
 *              })
 *      }
 * }
 */
class WebAPIDevice extends WifiDevice {

	/**
	 * This method needs to be called from a device.onInit(), it will create a {@link PromiseQueue} that will be used
	 * for queueing, throttling and rate limiting api calls.
	 * @param {Object} options
	 * @param {string} [options.apiBaseUrl] - Url used for making api calls
	 * @param {number} [options.throttle] - Throttle value, time in ms between api calls
	 * @param {number} [options.rateLimit]
	 * @param {number} [options.rateLimit.max] - Maximum number of api calls per time unit
	 * @param {number} [options.rateLimit.per] - Time unit in ms
	 * @returns {Promise}
	 */
	async onInit(options = {}) {
		await super.onInit(options)
			.catch(err => {
				this.error('Error: WifiDevice onInit', err);
				return Promise.reject();
			});

		this.log('init WebAPIDevice');

		this.apiBaseUrl = options.apiBaseUrl;
		this._request = request;

		// Set base url
		if (typeof this.apiBaseUrl !== 'undefined') this.setDefaultBaseUrl(this.apiBaseUrl);

		// Abort queue if it was created before
		if (typeof this._apiCallQueue !== 'undefined') this._apiCallQueue.abort();
		this._apiCallQueue = new PromiseQueue({
			throttle: options.throttle || 0,
			rateLimit: options.rateLimit,
		});

		// Abort queue if it was created before
		if (typeof this._apiCallPriorityQueue !== 'undefined') this._apiCallPriorityQueue.abort();

		// Setup a priority queue without throttling and rate limiting
		this._apiCallPriorityQueue = new PromiseQueue();
	}

	/**
	 * Method that will be called when device is deleted, it will abort all outstanding api calls.
	 */
	onDeleted() {
		this.log('onDeleted() -> WebAPIDevice');
		super.onDeleted();
		this._apiCallQueue.abort();
		this._apiCallPriorityQueue.abort();
	}

	/**
	 * Method that sets a default base url on the request object.
	 * @param {string} baseUrl - Base url, e.g.; http://example.api.com/
	 */
	setDefaultBaseUrl(baseUrl) {
		this._request = this._request.defaults({ baseUrl });
	}

	/**
	 * Method that sets a default header on the request object. Useful for setting authorization headers.
	 * @param {Object} headerObj - Object that will be set as default headers property
	 */
	setDefaultHeaders(headerObj) {
		this._request = this._request.defaults({ headers: headerObj });
	}

	/**
	 * Method that will perform a request.
	 * @param {Object} options
	 * @param {string} [options.uri] - Valid uri, or relative uri to apiBaseUrl
	 * @param {boolean} [options.priority] - If API call needs to skip rate limited and throttled queue
	 * @param {boolean} [options.retryOnFail] - When API call fails, retry once
	 * @param {string} [options.method] - GET, POST, PUT, DELETE
	 * @param {boolean} [options.json=true] - Parse response as JSON
	 * @param {Object} [options.headers] - Headers to be added to the request (will merge with default headers)
	 * @returns {Promise}
	 */
	apiCall(options = {}) {
		const queue = (options.priority === true) ? this._apiCallPriorityQueue : this._apiCallQueue;
		return WebAPIUtil.apiCall(options, queue, this._request)
			.then(this.webAPIResponseHandler.bind(this))
			.catch(this.webAPIErrorHandler.bind(this));
	}

	/**
	 * Method that will perform a GET request.
	 * @param {Object} options
	 * @param {string} [options.uri] - Valid uri, or relative uri to apiBaseUrl
	 * @param {boolean} [options.priority] - If API call needs to skip rate limited and throttled queue
	 * @param {boolean} [options.retryOnFail] - When API call fails, retry once
	 * @param {boolean} [options.json=true] - Parse response as JSON
	 * @param {Object} [options.headers] - Headers to be added to the request (will merge with default headers)
	 * @returns {Promise}
	 */
	apiCallGet(options = {}) {
		options.method = 'GET';
		return this.apiCall(options).catch(err => {
			this.error('apiCallGet error', err);
			throw err;
		});
	}

	/**
	 * Method that will perform a POST request.
	 * @param {Object} options
	 * @param {string} [options.uri] - Valid uri, or relative uri to apiBaseUrl
	 * @param {boolean} [options.priority] - If API call needs to skip rate limited and throttled queue
	 * @param {boolean} [options.retryOnFail] - When API call fails, retry once
	 * @param {Object} [options.headers] - Headers to be added to the request (will merge with default headers)
	 * @param {Object} data - JSON data to POST
	 * @returns {Promise}
	 */
	apiCallPost(options, data) {
		options.method = 'POST';
		options.json = data;
		return this.apiCall(options).catch(err => {
			this.error('apiCallPost error', err);
			throw err;
		});
	}

	/**
	 * Method that will perform a PUT request.
	 * @param {Object} options
	 * @param {string} [options.uri] - Valid uri, or relative uri to apiBaseUrl
	 * @param {boolean} [options.priority] - If API call needs to skip rate limited and throttled queue
	 * @param {boolean} [options.retryOnFail] - When API call fails, retry once
	 * @param {Object} [options.headers] - Headers to be added to the request (will merge with default headers)
	 * @param {Object} data - JSON data to POST
	 * @returns {Promise}
	 */
	apiCallPut(options, data) {
		options.method = 'PUT';
		options.json = data;
		return this.apiCall(options).catch(err => {
			this.error('apiCallPut error', err);
			throw err;
		});
	}

	/**
	 * Method that will perform a DEL request.
	 * @param {Object} options
	 * @param {string} [options.uri] - Valid uri, or relative uri to apiBaseUrl
	 * @param {boolean} [options.priority] - If API call needs to skip rate limited and throttled queue
	 * @param {boolean} [options.retryOnFail] - When API call fails, retry once
	 * @param {boolean} [options.json=true] - Parse response as JSON
	 * @param {Object} [options.headers] - Headers to be added to the request (will merge with default headers)
	 * @returns {Promise}
	 */
	apiCallDel(options = {}) {
		options.method = 'DEL';
		return this.apiCall(options).catch(err => {
			this.error('apiCallDel error', err);
			throw err;
		});
	}

	/**
	 * Overridable method that will be called as middleware upon a successful API request.
	 * @param res
	 * @returns {*}
	 */
	webAPIResponseHandler(res) {
		return res;
	}

	/**
	 * Overridable method that will be called as middleware upon a failed API request.
	 * @param err
	 */
	webAPIErrorHandler(err) {
		throw err;
	}
}

module.exports = WebAPIDevice;
